@model DojoPuzzles.Models.FizzBuzzModels


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h2>FizzBuzz</h2>
        <p>
            Neste problema, você deverá exibir uma lista de 1 a 100, um em cada linha, com as seguintes exceções:
            <br />Números divisíveis por 3 deve aparecer como 'Fizz' ao invés do número;
            <br />Números divisíveis por 5 devem aparecer como 'Buzz' ao invés do número;
            <br />Números divisíveis por 3 e 5 devem aparecer como 'FizzBuzz' ao invés do número'.
        </p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.start, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.start, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.start, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.end, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.end, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.end, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@{Html.RenderAction("fizzBuzz", "FizzBuzz");}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
